{
  "markdown": "[MAVEN AI](https://maven-ai-six.vercel.app/)\n\nMenu\n\nClose\n\n# Agentic Application Workflow\n\n## How Maven Works: An End-to-End Workflow\n\nMaven is an AI-powered product assistant designed to streamline the process of researching, selecting, and comparingElectroniccategorized products. This document details the complete yet simple operational workflow of Maven, from the initial user interaction to the delivery of AI-powered results.\n\nComplete Workflow Overview\n\nA egde-level view of Maven's end-to-end workflow process\n\n![Combined Tool Diagram Usage](https://maven-ai-six.vercel.app/app-system-workflow.svg)\n\nReset\n\n## Workflow\n\n## 1\\. User Input Initiation\n\nThe workflow begins when a user interacts with Maven, providing input through one of several methods.\n\nText Input\n\nThe user enters a text-based query or request (e.g., “find me the best noise-canceling headphones“).\n\nProduct Attachment\n\nThe user attaches a product (represented by its ID, title, and link) to the conversation.\n\nProduct Comparison\n\nThe user requests a comparison between two products (identified by their call IDs).\n\nInquiry Response\n\nThe user responds to a previous inquiry from Maven, providing additional information.\n\nPayloadData Type Definition\\|typescript\n\nCopy\n\n```typescript\n1export type PayloadData = {\n2  textInput?: string;\n3  attachProduct?: AttachProduct;\n4  productCompare?: ProductCompare;\n5  inquiryResponse?: InquiryResponse;\n6};\n```\n\n## 2\\. Orchestrator Processing\n\nThe PayloadData is passed to the orchestrator function, the central control unit that manages the workflow.\n\n1\n\n### Message Unification\n\nThe user‘s input is converted into a standardizedUserContentMessageand then into aMessagePropertyobject, adding it to the conversation history.\n\n2\n\n### Intent Determination\n\nThe orchestrator analyzes the user's input to determine their intent (e.g., search for a product, get product details, compare products).\n\n3\n\n### Tool Selection\n\nBased on the intent, the orchestrator selects the most appropriate agent tool(s) from the available options.\n\n4\n\n### State Management\n\nThe orchestrator interacts withMutableAIStateto update the conversation history and manage the AI's state.\n\nAvailable Tools\\|typescript\n\nCopy\n\n```typescript\n1export const AvailableTools = {\n2  SEARCH_PRODUCT: \"searchProduct\",\n3  GET_PRODUCT_DETAILS: \"getProductDetails\",\n4  PRODUCTS_COMPARISON: \"productsComparison\",\n5  INQUIRE_USER: \"inquireUser\",\n6  RECOMMENDATOR: \"recommendator\",\n7} as const;\n```\n\n## 3\\. Agentic Tool Execution\n\nThe selected agent tool(s) are executed. Each tool performs a specific task, leveraging AI models and external APIs.\n\nRecommendatorSearch ProductProduct DetailsComparisonInquire User\n\nAI Product Picks (recommendator)\n\nProvides personalized product recommendations based on user intent and scope\n\n#### Input\n\n- User intent\n- Scope parameters\n\n#### Output\n\n- Personalized product recommendations\n- Explanatory insights\n- Optional related queries\n\n#### Process Flow\n\n1. Takes the user's intent and scope\n2. Generates recommendations usingstreamObjectand therecommendationSchema\n3. Generates explanatory insights usingstreamText\n4. Updates the AI state\n5. Optionally generates related queries\n\n## 4\\. State Mutation\n\nAfter a tool completes,mutateToolis called to update the AI state with the results.\n\n1\n\n### Validation (Optional)\n\nUses validateArgs andvalidateResultfromToolMutationConfigto validate input/output.\n\n2\n\n### Transformation (Optional)\n\nUsestransformResultto transform output before storing in the AI state.\n\n3\n\n### State Update\n\nUpdatesMutableAIStatewith tool results and generated messages.\n\n4\n\n### Override Assistant (Optional)\n\nIf provided, updates the AI state with the given content.\n\nMutationPayload Type Definition\\|typescript\n\nCopy\n\n```typescript\n1export type MutationPayload<ARGS, DATA> = {\n2  name: AvailableTool;\n3  args: ARGS;\n4  result: DATA;\n5  overrideAssistant?: {\n6    content: string;\n7  };\n8};\n```\n\n## 5\\. UI Update and Rendering\n\nThestreamUIfunction generates UI components based on the AI's state.\n\nUI Component Generation\n\nThe streamUI function generates React components to display results\n\nAssistantMessage\n\nProductSearch\n\nProductDetails\n\nProductComparison\n\nRecommendationAction\n\nUserInquiry\n\nRelatedMessage\n\nErrorMessage\n\nUIState Type Definition\\|typescript\n\nCopy\n\n```typescript\n1export type UIState = {\n2  id: string;\n3  display: ReactNode;\n4}[];\n```\n\n## 6\\. Error Handling\n\nError handling is implemented throughout the workflow to ensure robustness.\n\nAllExternalProcessingDataUser\n\nScraping Errors\n\nexternal\n\nhandleScrapingWithCache handles web scraping errors.\n\nAPI Errors\n\nexternal\n\nErrors from external API calls are caught.\n\nLLM Generation Errors\n\nprocessing\n\nErrors during text/object generation are caught.\n\nDatabase Errors\n\ndata\n\nErrors accessing the database are handled.\n\nInput Validation Errors\n\nuser\n\ninputInquirySchema and validation functions handle invalid input.\n\nStream Generation Status\n\nStreamGeneration Type\\|typescript\n\nCopy\n\n```typescript\n1export type StreamGeneration = {\n2  loading: boolean;\n3  process:\n4  \"initial\"\n5  | \"generating\"\n6  | \"api_success\"\n7  | \"api_error\"\n8  | \"database_error\"\n9  | \"fatal_error\"\n10  | \"done\"\n11  | ({} & string);\n12  error?: string;\n13};\n```\n\n## 7\\. Final Output\n\nThe final output is the updated UI, presented to the user. This reflects the AI agent's processing, including generated text, product information, comparisons, recommendations, or inquiries. The user can then continue the interaction.\n\nFinal UI Rendering\n\nThe final step in Maven's workflow is rendering the UI components to the user\n\n### Complete Workflow Cycle\n\nThe user can now view the results and continue the interaction, starting a new workflow cycle.\n\n## Conclusion\n\nThis document provides a simple, technical overview of Maven's workflow. By combining user input, AI-powered tools, state management, and dynamic UI generation, Maven delivers a powerful product research experience. The modular design ensures robustness and maintainability.",
  "metadata": {
    "og:image:alt": "Maven AI Workflow Preview",
    "ogDescription": "Understand how Maven AI processes your requests to deliver accurate and helpful product insights.",
    "twitter:image": "https://res.cloudinary.com/dberoyocy/image/upload/v1745408210/light-desktop-search_ftzyyz.png",
    "og:image:height": "630",
    "description": "Learn about the seamless workflow of Maven AI, from user input to AI-driven product research and insights.",
    "ogImage": "https://res.cloudinary.com/dberoyocy/image/upload/v1745408210/light-desktop-search_ftzyyz.png",
    "title": "Maven AI Workflow - How Our AI Assistant Works",
    "og:site_name": "Maven AI",
    "twitter:description": "Understand how Maven AI processes your requests to deliver accurate and helpful product insights.",
    "twitter:card": "summary_large_image",
    "og:description": "Understand how Maven AI processes your requests to deliver accurate and helpful product insights.",
    "og:url": "https://maven-ai-six.vercel.app/workflow",
    "og:title": "Maven AI Workflow",
    "keywords": "Maven AI workflow,AI assistant process,product research workflow,electronic product research",
    "ogSiteName": "Maven AI",
    "ogUrl": "https://maven-ai-six.vercel.app/workflow",
    "ogTitle": "Maven AI Workflow",
    "next-size-adjust": "",
    "author": "Rzky Prasetyo",
    "og:type": "website",
    "twitter:title": "Maven AI Workflow",
    "og:image": "https://res.cloudinary.com/dberoyocy/image/upload/v1745408210/light-desktop-search_ftzyyz.png",
    "twitter:creator": "@codebyrzky",
    "og:locale": "en_US",
    "favicon": "https://maven-ai-six.vercel.app/favicon.ico",
    "language": "en",
    "og:image:width": "1200",
    "viewport": "width=device-width, initial-scale=1",
    "ogLocale": "en_US",
    "scrapeId": "681f4983-c402-4ab9-a338-86c18e35597c",
    "sourceURL": "https://maven-ai-six.vercel.app/workflow",
    "url": "https://maven-ai-six.vercel.app/workflow",
    "statusCode": 200,
    "contentType": "text/html; charset=utf-8",
    "proxyUsed": "basic"
  },
  "warning": "This scrape job was throttled at your current concurrency limit. If you'd like to scrape faster, you can upgrade your plan."
}